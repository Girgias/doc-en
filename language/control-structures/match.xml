<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<sect1 xml:id="control-structures.match" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>match</literal></title>
 <?phpdoc print-version-for="match"?>
 <para>
  <!-- currently using literal pattern as they are the only one accepted but
   if we get pattern matching we should expand this into a separate page -->
  The <literal>match</literal> expression branches on a literal pattern.
  Similarly to a <literal>switch</literal> statement, a <literal>match</literal>
  expression has a scrutinee expression, which is the value to compare to
  the patterns. The scrutinee expression and the patterns must have the same type.
 </para>

 <para>
  The <literal>match</literal> expression is similar to a <literal>switch</literal>
  statement but has many some key differences:
  
  <itemizedlist>
   <listitem>
    <simpara>
     A <literal>match</literal> arm compares values strictly instead as loosely as the switch statement does 
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     A <literal>match</literal> expression returns a value
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>Match</literal> arms do not fallthrough compared to switch cases.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     A <literal>match</literal> expression is exhaustive
    </simpara>
   </listitem>
  </itemizedlist>
 </para>

 <example>
  <title>Structure of a <literal>match</literal> expression</title>
  <programlisting role="php">
<![CDATA[
<?php
$return_value = match (scrutinee_expression) {
    single_conditional_expression => return_expression,
    conditional_expression1, conditional_expression2 => return_expression,
};
?>
]]>
  </programlisting>
  
  <note>
   <simpara>
    The result of a match expression does not need to be used.
   </simpara>
  </note>
 </example>

 <para>
  As <literal>switch</literal> statements, <literal>match</literal>
  expressions are executed match arm by match arm.
  In the beginning, no code is executed.
  The conditional expressions are only evaluated if all previous conditional
  expressions didn't match the scrutinee expression.
  Only the return expression corresponding to the matching conditional
  expression will be evaluated.
  For example:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$result = match ($x) {
    foo() => ...,
    $this->bar() => ..., // bar() isn't called if foo() matched with $x
    $this->baz => ...,
    // etc.
};
?>
]]>
   </programlisting>
  </informalexample>
 </para>

 <para>
  A special case is the <literal>default</literal> pattern.
  This pattern matches anything that wasn't previously matched.
  For example:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$expressionResult = match ($condition) {
    1, 2 => foo(),
    3, 4 => bar(),
    default => baz(),
};
?>
]]>
   </programlisting>
  </informalexample>
  <note>
   <simpara>
    Multiple default patterns will raise a
    <constant>E_FATAL_ERROR</constant> error.
   </simpara>
  </note>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
